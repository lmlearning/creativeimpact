import argparse
import json
import csv
import random
import os

# Ensure the directory exists (though create_file_with_block should handle it)
# For robustness if this script were moved or run in a different context.
# os.makedirs(os.path.dirname(__file__), exist_ok=True)

def main():
    parser = argparse.ArgumentParser(description="Score AUT outputs and generate a CSV.")
    parser.add_argument(
        "--input_file",
        required=True,
        help="Path to the JSON input file generated by generate_outputs_aut.py."
    )
    parser.add_argument(
        "--output_file",
        required=True,
        help="Full path for the output CSV file (e.g., outputs/scores/scores_aut.csv)."
    )
    args = parser.parse_args()

    # Ensure output directory exists
    output_dir = os.path.dirname(args.output_file)
    if output_dir: # Create directory if output_file path includes a directory
        os.makedirs(output_dir, exist_ok=True)

    try:
        with open(args.input_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
    except FileNotFoundError:
        print(f"Error: Input file {args.input_file} not found.")
        return
    except json.JSONDecodeError:
        print(f"Error: Could not decode JSON from {args.input_file}.")
        return

    csv_header = ["item_id", "plain_fluency", "creative_fluency", "plain_originality", "creative_originality"]

    with open(args.output_file, 'w', newline='', encoding='utf-8') as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow(csv_header)

        for item in data:
            item_id = item.get("item_id", "unknown_id")
            if item.get("error"): # Skip items that had errors during generation
                print(f"Skipping item {item_id} due to generation error: {item['error']}")
                writer.writerow([item_id, "ERROR", "ERROR", "ERROR", "ERROR"])
                continue

            # Dummy scoring logic
            plain_fluency = random.randint(1, 5)
            creative_fluency = random.randint(1, 5)
            plain_originality = round(random.uniform(0.0, 2.0), 2)
            creative_originality = round(random.uniform(0.0, 2.0), 2)

            writer.writerow([
                item_id,
                plain_fluency,
                creative_fluency,
                plain_originality,
                creative_originality
            ])

    print(f"Successfully generated AUT scores to {args.output_file}")

if __name__ == '__main__':
    main()
